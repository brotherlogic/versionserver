// Code generated by protoc-gen-go. DO NOT EDIT.
// source: versionserver.proto

/*
Package recordcollection is a generated protocol buffer package.

It is generated from these files:
	versionserver.proto

It has these top-level messages:
	Version
	GetVersionRequest
	GetVersionResponse
*/
package recordcollection

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Version struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Version) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Version) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type GetVersionRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetVersionRequest) Reset()                    { *m = GetVersionRequest{} }
func (m *GetVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetVersionRequest) ProtoMessage()               {}
func (*GetVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetVersionRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetVersionResponse struct {
	Version *Version `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *GetVersionResponse) Reset()                    { *m = GetVersionResponse{} }
func (m *GetVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetVersionResponse) ProtoMessage()               {}
func (*GetVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetVersionResponse) GetVersion() *Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func init() {
	proto.RegisterType((*Version)(nil), "recordcollection.Version")
	proto.RegisterType((*GetVersionRequest)(nil), "recordcollection.GetVersionRequest")
	proto.RegisterType((*GetVersionResponse)(nil), "recordcollection.GetVersionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VersionServer service

type VersionServerClient interface {
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
}

type versionServerClient struct {
	cc *grpc.ClientConn
}

func NewVersionServerClient(cc *grpc.ClientConn) VersionServerClient {
	return &versionServerClient{cc}
}

func (c *versionServerClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := grpc.Invoke(ctx, "/recordcollection.VersionServer/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VersionServer service

type VersionServerServer interface {
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
}

func RegisterVersionServerServer(s *grpc.Server, srv VersionServerServer) {
	s.RegisterService(&_VersionServer_serviceDesc, srv)
}

func _VersionServer_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServerServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordcollection.VersionServer/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServerServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordcollection.VersionServer",
	HandlerType: (*VersionServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _VersionServer_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "versionserver.proto",
}

func init() { proto.RegisterFile("versionserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x4b, 0x2d, 0x2a,
	0xce, 0xcc, 0xcf, 0x2b, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0x28, 0x4a, 0x4d, 0xce, 0x2f, 0x4a, 0x49, 0xce, 0xcf, 0xc9, 0x49, 0x4d, 0x2e, 0xc9, 0xcc,
	0xcf, 0x53, 0x32, 0xe4, 0x62, 0x0f, 0x83, 0x28, 0x14, 0x12, 0xe0, 0x62, 0xce, 0x4e, 0xad, 0x94,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x85, 0x44, 0xb8, 0x58, 0xcb, 0x12, 0x73, 0x4a,
	0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x98, 0x83, 0x20, 0x1c, 0x25, 0x55, 0x2e, 0x41, 0xf7, 0xd4,
	0x12, 0xa8, 0xae, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x4c, 0xcd, 0x4a, 0x9e, 0x5c, 0x42,
	0xc8, 0xca, 0x8a, 0x0b, 0x40, 0x6e, 0x11, 0x32, 0xe6, 0x62, 0x87, 0x3a, 0x0c, 0x6c, 0x28, 0xb7,
	0x91, 0xa4, 0x1e, 0xba, 0x9b, 0xf4, 0x60, 0x7a, 0x60, 0x2a, 0x8d, 0xb2, 0xb8, 0x78, 0xa1, 0x62,
	0xc1, 0x60, 0xdf, 0x08, 0x45, 0x72, 0x71, 0x21, 0xcc, 0x16, 0x52, 0xc6, 0x34, 0x02, 0xc3, 0x81,
	0x52, 0x2a, 0xf8, 0x15, 0x41, 0x9c, 0xa7, 0xc4, 0x90, 0xc4, 0x06, 0x0e, 0x29, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x14, 0xae, 0x06, 0x0a, 0x40, 0x01, 0x00, 0x00,
}
