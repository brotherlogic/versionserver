// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VersionServerClient is the client API for VersionServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VersionServerClient interface {
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	SetVersion(ctx context.Context, in *SetVersionRequest, opts ...grpc.CallOption) (*SetVersionResponse, error)
	SetIfLessThan(ctx context.Context, in *SetIfLessThanRequest, opts ...grpc.CallOption) (*SetIfLessThanResponse, error)
}

type versionServerClient struct {
	cc grpc.ClientConnInterface
}

func NewVersionServerClient(cc grpc.ClientConnInterface) VersionServerClient {
	return &versionServerClient{cc}
}

func (c *versionServerClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/versionserver.VersionServer/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionServerClient) SetVersion(ctx context.Context, in *SetVersionRequest, opts ...grpc.CallOption) (*SetVersionResponse, error) {
	out := new(SetVersionResponse)
	err := c.cc.Invoke(ctx, "/versionserver.VersionServer/SetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionServerClient) SetIfLessThan(ctx context.Context, in *SetIfLessThanRequest, opts ...grpc.CallOption) (*SetIfLessThanResponse, error) {
	out := new(SetIfLessThanResponse)
	err := c.cc.Invoke(ctx, "/versionserver.VersionServer/SetIfLessThan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionServerServer is the server API for VersionServer service.
// All implementations should embed UnimplementedVersionServerServer
// for forward compatibility
type VersionServerServer interface {
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	SetVersion(context.Context, *SetVersionRequest) (*SetVersionResponse, error)
	SetIfLessThan(context.Context, *SetIfLessThanRequest) (*SetIfLessThanResponse, error)
}

// UnimplementedVersionServerServer should be embedded to have forward compatible implementations.
type UnimplementedVersionServerServer struct {
}

func (UnimplementedVersionServerServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedVersionServerServer) SetVersion(context.Context, *SetVersionRequest) (*SetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVersion not implemented")
}
func (UnimplementedVersionServerServer) SetIfLessThan(context.Context, *SetIfLessThanRequest) (*SetIfLessThanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIfLessThan not implemented")
}

// UnsafeVersionServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VersionServerServer will
// result in compilation errors.
type UnsafeVersionServerServer interface {
	mustEmbedUnimplementedVersionServerServer()
}

func RegisterVersionServerServer(s grpc.ServiceRegistrar, srv VersionServerServer) {
	s.RegisterService(&_VersionServer_serviceDesc, srv)
}

func _VersionServer_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServerServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/versionserver.VersionServer/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServerServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionServer_SetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServerServer).SetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/versionserver.VersionServer/SetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServerServer).SetVersion(ctx, req.(*SetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionServer_SetIfLessThan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIfLessThanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServerServer).SetIfLessThan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/versionserver.VersionServer/SetIfLessThan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServerServer).SetIfLessThan(ctx, req.(*SetIfLessThanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "versionserver.VersionServer",
	HandlerType: (*VersionServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _VersionServer_GetVersion_Handler,
		},
		{
			MethodName: "SetVersion",
			Handler:    _VersionServer_SetVersion_Handler,
		},
		{
			MethodName: "SetIfLessThan",
			Handler:    _VersionServer_SetIfLessThan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "versionserver.proto",
}
